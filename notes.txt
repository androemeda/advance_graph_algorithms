max amount of edges in a simple graph undirected = nC2 = n(n-1)/2
min amount of edges in a simple undirected graph = 0

max amount of edges in a simple graph directed = nC2 * 2 = n(n-1)
min amount of edges in a simple directed graph = 0

degree of a node in undirected graph = number of neighbours
degree of a node in directed graph : indegree = number of incoming edges
                                     outdegree = number of outgoing edges
                                     sum(indegrees) + sum(outdegrees) = 2*(no. of edges)

how to store graph ? -> 1. edge list : array of pairs - sc : o(m) , m = number of edges
                        2. Adj matrix : sc : o(n^2) , n = number of nodes
                        3. Adj list : array of arraylist - sc : o(n + m)


cycle of odd length => not bipartite

0-1 / 0-x bfs : use deque


topological sorting : only possible in directed acyclic graph (DAG)

** we can always apply DP in DAG **





doubt : 
1. 0-1 bfs hw question ?
2. ABC_PATH
3. B - Round Trip
4. E - Valid BFS ?
5. comparator in cpp
6. longest flight route - cycles ?
7. DP only works if the graph is a DAG (Directed Acyclic Graph) and you traverse nodes in topological order ?
8. longest flight route
9. priority_queue syntax
10. time complexities of all algorithms
11. instead of int_max/int_min , keep llong_max/llong_min everywhere and then check for overflows always.
12. define int as long long in scaler env.